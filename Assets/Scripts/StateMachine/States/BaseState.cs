public abstract class BaseState
{
    protected StateMachine _context;
    protected StateFactory _factory;

    public BaseState(StateMachine context, StateFactory factory)
    {
        _context = context;
        _factory = factory;
    }

    public abstract void EnterState();
    public abstract void UpdateState();
    public abstract void ExitState();
    public abstract void CheckSwitchStates();
    public abstract void InitializeSubState();

    protected void SwitchState(BaseState newState)
    {
        //Reset boredom on a state change.
        //Do this before Exit or Enter state so they can override the value if necessary.
        _context.CurrentBoredom = 0.0f;

        ExitState();
        newState.EnterState();
        _context.CurrentState = newState;
    }

    //TODO
    void SetSuperState() { }
    void SetSubState() { }
    void UpdateStates() { }
}
