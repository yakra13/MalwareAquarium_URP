using UnityEngine;
/// <summary>
/// Hunt for food
/// </summary>
public class EatState : BaseState
{
    private GameObject nearestFood;
    private food_drop foodDropManager;

    private float _preTargetWeight;

    public EatState(StateMachine context, StateFactory factory)
        : base(context, factory)
    {
        _preTargetWeight = _context.Boid.boidData.targetWeight;
        _context.Boid.boidData.targetWeight = 1f;
    }

    public override void EnterState()
    {
        //Debug.Log("ENTERING EAT STATE");
        //TODO: crossfades...
        _context.Animator.CrossFade("swim", 1f);

        foodDropManager = GameObject.FindGameObjectWithTag("FoodDrop").GetComponent<food_drop>();
        foodDropManager.OnFoodDestroy += FoodDropManager_OnFoodDestroy;
        FindNearestFood();
    }

    private void FoodDropManager_OnFoodDestroy(object sender, System.EventArgs e)
    {
        FindNearestFood();
    }

    /// <summary>
    /// Find the nearest food from the food_drop script. nearestFood = null when there is no food;
    /// </summary>
    private void FindNearestFood()
    {
        float shortestDistance = 0f;
        GameObject target = null;
        foreach (var t in foodDropManager.foodList)
        {
            if (target == null)
            {
                shortestDistance = Vector3.Distance(_context.transform.position, t.transform.position);
                target = t;
            }
            else
            {
                float d = Vector3.Distance(_context.transform.position, t.transform.position);
                if (d < shortestDistance)
                {
                    shortestDistance = d;
                    target = t;
                }
            }
        }

        nearestFood = target;

        if (nearestFood != null)
            _context.Boid.CurrentTarget = nearestFood.transform;
    }

    public override void UpdateState()
    {
        //if there is no food target find one
        if (nearestFood == null)
        {
            //check if there is food and grab the nearest
            if (foodDropManager.foodList.Count > 0)
                FindNearestFood();
        }
        else
        {
            //check if fish is close enough to eat the food
            //TODO: could put a point object on the fishes mouths to be more accurate
            if (Vector3.Distance(_context.transform.position, nearestFood.transform.position) < 1.0f)
            {
                Debug.Log("Eating a food!");
                if (nearestFood.CompareTag("EvilFood"))
                {
                    //TODO:implement "malware injection"
                    _context.CurrentHealth -= _context.Boid.MaxHealth * 0.25f; //lost 25% of max health ~4 malwares at max health = dead
                }

                //GameObject.Destroy(nearestFood);
                nearestFood.GetComponent<DestroyAfterSeconds>().Eat();
                
                //foodDropManager.CleanFoodList();//remove the null in the food list caused by destroying the food object

                _context.CurrentFullness += _context.Boid.MaxFullness * 0.25f; //1 food restores 25% of max health
            }
        }

        CheckSwitchStates();
    }

    public override void ExitState()
    {
        //actions when exiting a state; clean up
        _context.Boid.boidData.targetWeight = _preTargetWeight;
    }

    public override void CheckSwitchStates()
    {
        //conditions required to change states
        if (_context.CurrentHealth <= 0.0f)
            SwitchState(_factory.Die());

        //if at least 80% full then explore again
        if (_context.CurrentFullness >= _context.Boid.MaxFullness * 0.8f)
            SwitchState(_factory.Explore());
    }

    public override void InitializeSubState()
    {
        //TODO
    }
}
