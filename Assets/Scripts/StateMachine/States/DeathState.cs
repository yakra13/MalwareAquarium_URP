using UnityEngine;

public class DeathState : BaseState
{
    private float _respawnTimer   = 0.0f;
    private float _transition     = 0.0f;
    private float _transitionTime = 5.0f;//dissolve over 5 seconds...
    
    private Material _material;

    private Vector3 _originalPosition;
    private float _bobDistance = 4.0f; 

    private bool _dissolving = false;

    public DeathState(StateMachine context, StateFactory factory)
    : base(context, factory)
    {
        _material = context.GetComponent<Renderer>().material;
        _originalPosition = context.transform.position;
    }

    public override void EnterState()
    {
        
    }

    public override void UpdateState()
    {
        _context.transform.position = _originalPosition + new Vector3(0.0f, Mathf.Sin(Time.time) * _bobDistance, 0.0f);

        if (!_dissolving)
        {
            _respawnTimer += Time.deltaTime;
            
            //after being dead for 1 minute
            if (_respawnTimer >= 60.0f)
            {
                _material.SetInt("_EnableDissolve", 1);//set to true
                _dissolving = true;
            }
        }
        else
        {
            _transition += Time.deltaTime / _transitionTime;
            _material.SetFloat("_DissolveTransition", _transition);
        }

        CheckSwitchStates();
    }

    public override void ExitState()
    {
    }

    public override void CheckSwitchStates()
    {
        //finished with the fade out effect
        if (_transition >= 1.0f)
        {
            //TODO: destroy this or reset it
            //if reset switchstate to explore and reset values in ExitState()
            SwitchState(_factory.Explore());
            SwitchState(_factory.Respawn());
        }
    }

    public override void InitializeSubState()
    {
        //TODO
    }
}
