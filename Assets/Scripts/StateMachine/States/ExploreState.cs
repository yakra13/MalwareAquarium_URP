using System.Diagnostics;

public class ExploreState : BaseState
{
    public ExploreState(StateMachine context, StateFactory factory)
        : base(context, factory)
    {

    }

    public override void EnterState()
    {
        _context.Animator.Play("swim");
        _context.Boid.ChangeTargetRandom();
    }

    public override void UpdateState()
    {
        CheckSwitchStates();
        //swim to random targets
        //switch targets based on: time/population/hunger
        //boid script handles movement

        if (_context.CurrentHealth <= 0.0f)
            SwitchState(_factory.Die());


        if (_context.CurrentBoredom > _context.Boid.MaxBoredom)
        {
            _context.Boid.ChangeTargetRandom();
            _context.ResetBoredomLevel();
        }


    }

    public override void ExitState()
    {
        //actions when exiting a state; clean up


    }

    public override void CheckSwitchStates()
    {
        //conditions required to change states

        if (_context.CurrentHealth <= 0.0f)
            SwitchState(_factory.Die());
        
        if (_context.CurrentFullness <= _context.Boid.MaxFullness * 0.5f)//current fullness is <= 50% of max fullness
            SwitchState(_factory.Eat());
    }

    public override void InitializeSubState()
    {
        //TODO
    }
}
