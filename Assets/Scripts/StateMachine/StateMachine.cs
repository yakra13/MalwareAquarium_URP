using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class StateMachine : MonoBehaviour
{
    private BaseState _curState;
    private StateFactory _factory;
    private Animator _animator;
    private Boid _boid;

    private float _curBoredom;
    private float _curFullness;
    private float _curHealth;

    private float _hungerTimer = 0.0f;

    public BaseState CurrentState
    {
        get { return _curState; }
        set { _curState = value; }
    }

    public float CurrentBoredom
    {
        get { return _curBoredom; }
        set { _curBoredom = value; }
    }

    public float CurrentFullness
    {
        get { return _curFullness; }
        set { _curFullness = value; }
    }

    public float CurrentHealth
    {
        get { return _curHealth; }
        set { _curHealth = value; }
    }


    public Animator Animator { get { return _animator; } }
    public Boid Boid { get { return _boid; } }

    public Material perObjectMaterial;

    private LightManager _lightManager;

    private bool preIsNight;

    private enum HealthState
    {
        Bad  = 0,
        Poor = 1,
        Fair = 2,
        Good = 3
    }

    private HealthState _curHealthState = HealthState.Good;
    private HealthState _preHealthState = HealthState.Good;

    private void Awake()
    {
        //Note: Awake is called even when the script component is disabled. start is not called until it is enabled 
        _factory = new StateFactory(this);
        //Debug.Log("AWAKE");
        
        //set up other stuff
    }

    void Start()
    {
        //Debug.Log("START");
        _animator = gameObject.GetComponent<Animator>();
        _boid = gameObject.GetComponent<Boid>();
        _lightManager = GameObject.Find("LightManager").GetComponent<LightManager>();
        //TODO: animator null?

        //TODO: copy the attached material to individually set properties at run time?? doesnt seem to work
        //perObjectMaterial = GetComponent<Renderer>().material;

        _curBoredom  = 0.0f;
        _curFullness = _boid.MaxFullness;
        _curHealth   = _boid.MaxHealth;
        
        _curState = _factory.Explore();
        _curState.EnterState();

    }

    void Update()
    {
        if (_curState is not DeathState)
        {
            //Every frame the fish gets more hungry and bored
            _curBoredom  = Mathf.Clamp(_curBoredom + _boid.BoredomRatePerSecond * Time.deltaTime, 0.0f, Boid.MaxBoredom);
            _curFullness = Mathf.Clamp(_curFullness - _boid.HungerRatePerSecond * Time.deltaTime, 0.0f, Boid.MaxFullness);

            if (_curFullness <= 0.0f && _hungerTimer >= 60.0f )
            {
                //TODO: hard coded hunger damage/time; current numbers means if goes hungry for 100 mins it dies
                _curHealth -= 1.0f;
                _hungerTimer = 0.0f;

                float avgHealth = _curHealth / _boid.boidData.maxHealth;

                if (avgHealth > 0.0f)
                    _curHealthState = HealthState.Bad;
                if (avgHealth > 0.25f)
                    _curHealthState = HealthState.Poor;
                if (avgHealth > 0.5f)
                    _curHealthState = HealthState.Fair;
                if (avgHealth > 0.75f)
                    _curHealthState = HealthState.Good;

                //got healthier
                if (_curHealthState > _preHealthState)
                {
                    StartCoroutine(BlendSickness("_Transition_Sick_" + _preHealthState.ToString(), 1.0f, 0.0f));
                }
                //got sicker
                else if (_curHealthState < _preHealthState)
                {
                    StartCoroutine(BlendSickness("_Transition_Sick_" + _curHealthState.ToString(), 0.0f, 1.0f));
                }
                
                _preHealthState = _curHealthState;
            }

            _hungerTimer += Time.deltaTime;

            //if its night now and wasnt before
            if (_lightManager.GetIsNight() && !preIsNight)
            {
                //blend emission
                StartCoroutine(BlendEmission(0.0f, 1.0f));
            }
            //not night now but it used to be
            else if (!_lightManager.GetIsNight() && preIsNight)
            {
                StartCoroutine(BlendEmission(1.0f, 0.0f));
            }
        }

        preIsNight = _lightManager.GetIsNight();
        _curState.UpdateState();
    }

    public void ResetBoredomLevel()
    {
        _curBoredom = 0.0f;
    }

    IEnumerator BlendEmission(float start, float end, float duration = 10.0f)
    {
        float elapsed = 0.0f;

        while (elapsed < duration)
        {
            perObjectMaterial.SetFloat("_Emission_Intensity", Mathf.Lerp(start, end, elapsed / duration));
            elapsed += Time.deltaTime;
            yield return null;
        }

        perObjectMaterial.SetFloat("_Emission_Intensity", end);
    }

    IEnumerator BlendSickness(string name, float start, float end, float duration = 5.0f)
    {
        float elapsed = 0.0f;

        while (elapsed < duration)
        {
            perObjectMaterial.SetFloat(name, Mathf.Lerp(start, end, elapsed / duration));
            elapsed += Time.deltaTime;
            yield return null;
        }

        perObjectMaterial.SetFloat(name, end);
        yield return null;
    }
}
