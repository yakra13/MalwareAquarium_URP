using System.Collections.Generic;
using UnityEngine;

public class StateMachine : MonoBehaviour
{
    private BaseState _currentState;
    private StateFactory _factory;
    private Animator _animator;
    private Boid _boid;

    private float _currentBoredom;
    private float _currentFullness;
    private float _currentHealth;

    private float _hungerTimer = 0.0f;

    public BaseState CurrentState
    {
        get { return _currentState; }
        set { _currentState = value; }
    }

    public float CurrentBoredom
    {
        get { return _currentBoredom; }
        set { _currentBoredom = value; }
    }

    public float CurrentFullness
    {
        get { return _currentFullness; }
        set { _currentFullness = value; }
    }

    public float CurrentHealth
    {
        get { return _currentHealth; }
        set { _currentHealth = value; }
    }


    public Animator Animator { get { return _animator; } }
    public Boid Boid { get { return _boid; } }

    public Material perObjectMaterial;

    private void Awake()
    {
        //Note: Awake is called even when the script component is disabled. start is not called until it is enabled 
        _factory = new StateFactory(this);
        Debug.Log("AWAKE");
        
        //set up other stuff
    }

    void Start()
    {
        Debug.Log("START");
        _animator = gameObject.GetComponent<Animator>();
        _boid = gameObject.GetComponent<Boid>();
        //TODO: animator null?

        //TODO: copy the attached material to individually set properties at run time?? doesnt seem to work
        //perObjectMaterial = GetComponent<Renderer>().material;

        _currentBoredom  = 0.0f;
        _currentFullness = _boid.MaxFullness;
        _currentHealth   = _boid.MaxHealth;
        
        _currentState = _factory.Explore();
        _currentState.EnterState();
    }

    void Update()
    {
        if (_currentState is DeathState)
        //Every frame the fish gets more hungry and bored
        _currentBoredom  = Mathf.Clamp(_currentBoredom + _boid.BoredomRatePerSecond * Time.deltaTime, 0.0f, Boid.MaxBoredom);
        _currentFullness = Mathf.Clamp(_currentFullness - _boid.HungerRatePerSecond * Time.deltaTime, 0.0f, Boid.MaxFullness);

        if (_currentFullness <= 0.0f && _hungerTimer >= 60.0f )
        {
            //TODO: hard coded hunger damage/time; current numbers means if goes hungry for 100 mins it dies
            _currentHealth -= 1.0f;
            _hungerTimer = 0.0f;
        }

        _hungerTimer += Time.deltaTime;

        _currentState.UpdateState();
    }

    public void ResetBoredomLevel()
    {
        _currentBoredom = 0.0f;
    }
}
