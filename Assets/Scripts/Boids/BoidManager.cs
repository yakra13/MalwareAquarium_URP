using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public struct BoidData
{
    public Vector3 position;
    public Vector3 direction;

    public Vector3 flockHeading;
    public Vector3 flockCentre;
    public Vector3 avoidanceHeading;
    public int numFlockmates;

    public static int Size
    {
        get
        {
            return sizeof(float) * 3 * 5 + sizeof(int);
        }
    }
}

public class BoidManager : MonoBehaviour
{
    const int BOID_THREAD_GROUP_SIZE = 1024;

    public ComputeShader compute;

    [SerializeField] List<Transform> targets            = new List<Transform>();
    [SerializeField] List<BoidSpawner> spawnLocations   = new List<BoidSpawner>();
    [SerializeField] List<BoidDataObject> boidSpawnData = new List<BoidDataObject>();

    private List<Boid> boidList = new List<Boid>();

    [SerializeField] float perceptionRadius = 5.0f;
    [SerializeField] float avoidanceRadius = 3.0f;

    void Start()
    {
        SpawnBoids();
    }

    void SpawnBoid(BoidDataObject boidData)
    {
        int randomSpawn = Random.Range(0, spawnLocations.Count);
        SpawnBoid(boidData, spawnLocations[randomSpawn]);
    }

    void SpawnBoid(BoidDataObject boidData, BoidSpawner spawner)
    {
        int targetIndex = Random.Range(0, targets.Count);
        SpawnBoid(boidData, spawner, targetIndex);
    }

    void SpawnBoid(BoidDataObject boidData, BoidSpawner spawner, int targetIndex)
    {
        StartCoroutine(SpawnWhenClear(boidData, spawner, targetIndex));
    }

    void SpawnBoids()
    {
        foreach (BoidDataObject item in boidSpawnData)
        {
            int randomSpawn = Random.Range(0, spawnLocations.Count);
            int randomTarget = Random.Range(0, targets.Count);

            SpawnBoid(item, spawnLocations[randomSpawn], randomTarget);
        }
    }

    void Update()
    {
        //if (boids != null)
        //{
        int numBoids = boidList.Count;
        if (numBoids > 0)
        {
            //int numBoids = boids.Length;
            var boidData = new BoidData[numBoids];

            for (int i = 0; i < boidList.Count; i++)//boids.Length; i++)
            {
                boidData[i].position = boidList[i].position;//boids[i].position;
                boidData[i].direction = boidList[i].forward;//boids[i].forward;
            }

            var boidBuffer = new ComputeBuffer(numBoids, BoidData.Size);
            boidBuffer.SetData(boidData);

            compute.SetBuffer(0, "boids", boidBuffer);
            compute.SetInt("numBoids", boidList.Count);// boids.Length);
            compute.SetFloat("viewRadius", perceptionRadius);//settings.perceptionRadius);
            compute.SetFloat("avoidRadius", avoidanceRadius);// settings.avoidanceRadius);

            int threadGroups = Mathf.CeilToInt(numBoids / (float)BOID_THREAD_GROUP_SIZE);
            compute.Dispatch(0, threadGroups, 1, 1);

            boidBuffer.GetData(boidData);

            for (int i = 0; i < boidList.Count; i++)//boids.Length; i++)
            {
                //boids[i].avgFlockHeading = boidData[i].flockHeading;
                //boids[i].centreOfFlockmates = boidData[i].flockCentre;
                //boids[i].avgAvoidanceHeading = boidData[i].avoidanceHeading;
                //boids[i].numPerceivedFlockmates = boidData[i].numFlockmates;
                boidList[i].avgFlockHeading = boidData[i].flockHeading;
                boidList[i].centreOfFlockmates = boidData[i].flockCentre;
                boidList[i].avgAvoidanceHeading = boidData[i].avoidanceHeading;
                boidList[i].numPerceivedFlockmates = boidData[i].numFlockmates;

                //boids[i].UpdateBoid();
                boidList[i].UpdateBoid();
            }

            boidBuffer.Release();
        }
    }

    IEnumerator SpawnWhenClear(BoidDataObject boidData, BoidSpawner spawner, int targetIndex)
    {
        yield return new WaitForSeconds(Random.Range(0f, 3f));

        while (!spawner.IsEmpty)
        {
            yield return new WaitForSeconds(3f);
        }

        Vector3 pos = spawner.transform.position + Random.insideUnitSphere * spawner.spawnCollider.radius / 2f;

        GameObject boidObject = Instantiate(boidData.Prefab);

        Boid boid = boidObject.AddComponent<Boid>();
        boid.boidData = boidData;

        boid.transform.position = pos;
        boid.transform.forward = Random.insideUnitSphere;

        boid.Targets = targets;
        boid.SpawnLocations = spawnLocations;
        boid.CurrentTarget = targets[targetIndex];//NOTE: explore state handles this on start can remove probably yea

        boid.Initialize();

        float rScale = Random.Range(0.75f, 1.25f);
        boidObject.transform.localScale = new Vector3(rScale, rScale, rScale);

        //copy the material to set per fish material settings...
        boidObject.gameObject.GetComponent<StateMachine>().perObjectMaterial = boidObject.gameObject.GetComponentInChildren<SkinnedMeshRenderer>().material;

        //TODO: 'hack' to prevent null reference exception. prefabs state machine script needs to start disabled
        boidObject.GetComponent<StateMachine>().enabled = true;//.SetActive(true);

        boidList.Add(boid);
    }
}