using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering.Universal;

public class LightManager : MonoBehaviour
{
    public Light mainLight;
    public Light fillCool;
    public Light fillWarm;
    public Light cookie;
    public Light extraBrightening;

    public UniversalAdditionalLightData URPLightData;

    [SerializeField] private float cycleTime = 20.0f;
    [SerializeField] private float blendDuration = 10.0f;
    float elapsedTime = 0.0f;

    [SerializeField] private float minMainIntensity = 0.0f;
    [SerializeField] private float minCoolIntensity = 0.01f;
    [SerializeField] private float minWarmIntensity = 0.01f;

    float mainDefaultIntensity;
    float coolDefaultIntensity;
    float warmDefaultIntensity;
    float extraDefaultIntensity;


    
    bool isNight = false;

    Vector2 minLightCookieSize;
    Vector2 maxLightCookieSize;
    [SerializeField] private float lightCookieOffsetSpeed = 1.0f;

    // Start is called before the first frame update
    void Start()
    {
        mainDefaultIntensity = mainLight.intensity;
        coolDefaultIntensity = fillCool.intensity;
        warmDefaultIntensity = fillWarm.intensity;
        extraDefaultIntensity = extraBrightening.intensity;

        minLightCookieSize = new Vector2(100f, 100f);
        maxLightCookieSize = new Vector2(120f, 120f);
    }

    // Update is called once per frame
    void Update()
    {
        elapsedTime += Time.deltaTime;
        if(elapsedTime >= cycleTime)
        {
            StartCoroutine(BlendLightIntensity(mainLight,
                                               isNight ? minMainIntensity : mainDefaultIntensity,
                                               isNight ? mainDefaultIntensity : minMainIntensity));
            StartCoroutine(BlendLightIntensity(fillCool,
                                               isNight ? minCoolIntensity : coolDefaultIntensity,
                                               isNight ? coolDefaultIntensity : minCoolIntensity));
            StartCoroutine(BlendLightIntensity(fillWarm,
                                               isNight ? minWarmIntensity : warmDefaultIntensity,
                                               isNight ? warmDefaultIntensity : minWarmIntensity));
            StartCoroutine(BlendLightIntensity(extraBrightening,
                                               isNight ? 0f : extraDefaultIntensity,
                                               isNight ? extraDefaultIntensity : 0f));

            isNight = !isNight;

            elapsedTime = 0.0f;
        }

        float t = (Mathf.Sin(Time.timeSinceLevelLoad) + 1f) * 0.5f;

        //cookie.transform.rotation = Quaternion.Lerp(Quaternion.Euler(120f, 0f, 0f), Quaternion.Euler(122f, 0f, 0f), t);
        //cookie.transform.rotation = Quaternion.Euler(0f, 2f * Time.deltaTime, 0f) * cookie.transform.rotation;
        // cookie
        //URPLightData.lightCookieSize = Vector2.Lerp(minLightCookieSize, maxLightCookieSize, t);
        URPLightData.lightCookieOffset += Vector2.left * lightCookieOffsetSpeed * Time.deltaTime;
    }

    IEnumerator BlendLightIntensity(Light l, float start, float end)
    {
        float elapsed = 0f;

        while (elapsed < blendDuration)
        {
            l.intensity = Mathf.Lerp(start, end, elapsed / blendDuration);
            elapsed += Time.deltaTime;
            yield return null;
        }

        l.intensity = end;
    }

    public bool GetIsNight()
    {
        return isNight;
    }
}
